// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file article/v1/article.proto (package article.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message article.v1.ListArticlesRequest
 */
export class ListArticlesRequest extends Message<ListArticlesRequest> {
  /**
   * 信源id，不传就是查所有信源
   *
   * @generated from field: repeated string source_id = 1;
   */
  sourceId: string[] = [];

  /**
   * @generated from field: uint32 page_number = 2;
   */
  pageNumber = 0;

  /**
   * @generated from field: uint32 limit = 3;
   */
  limit = 0;

  constructor(data?: PartialMessage<ListArticlesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "article.v1.ListArticlesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "page_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListArticlesRequest {
    return new ListArticlesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListArticlesRequest {
    return new ListArticlesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListArticlesRequest {
    return new ListArticlesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListArticlesRequest | PlainMessage<ListArticlesRequest> | undefined, b: ListArticlesRequest | PlainMessage<ListArticlesRequest> | undefined): boolean {
    return proto3.util.equals(ListArticlesRequest, a, b);
  }
}

/**
 * @generated from message article.v1.ListArticlesResponse
 */
export class ListArticlesResponse extends Message<ListArticlesResponse> {
  /**
   * @generated from field: uint32 total_count = 1;
   */
  totalCount = 0;

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: uint32 total_page = 3;
   */
  totalPage = 0;

  /**
   * @generated from field: uint32 current_page = 4;
   */
  currentPage = 0;

  /**
   * @generated from field: repeated article.v1.Article articles = 5;
   */
  articles: Article[] = [];

  constructor(data?: PartialMessage<ListArticlesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "article.v1.ListArticlesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "total_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "current_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "articles", kind: "message", T: Article, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListArticlesResponse {
    return new ListArticlesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListArticlesResponse {
    return new ListArticlesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListArticlesResponse {
    return new ListArticlesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListArticlesResponse | PlainMessage<ListArticlesResponse> | undefined, b: ListArticlesResponse | PlainMessage<ListArticlesResponse> | undefined): boolean {
    return proto3.util.equals(ListArticlesResponse, a, b);
  }
}

/**
 * @generated from message article.v1.Article
 */
export class Article extends Message<Article> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string source_id = 2;
   */
  sourceId = "";

  /**
   * @generated from field: string title_chinese = 3;
   */
  titleChinese = "";

  /**
   * @generated from field: string title_english = 4;
   */
  titleEnglish = "";

  /**
   * @generated from field: string preview_chinese = 5;
   */
  previewChinese = "";

  /**
   * @generated from field: string preview_english = 6;
   */
  previewEnglish = "";

  /**
   * @generated from field: google.protobuf.Timestamp published_at = 7;
   */
  publishedAt?: Timestamp;

  constructor(data?: PartialMessage<Article>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "article.v1.Article";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "source_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "title_chinese", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "title_english", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "preview_chinese", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "preview_english", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "published_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Article {
    return new Article().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Article {
    return new Article().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Article {
    return new Article().fromJsonString(jsonString, options);
  }

  static equals(a: Article | PlainMessage<Article> | undefined, b: Article | PlainMessage<Article> | undefined): boolean {
    return proto3.util.equals(Article, a, b);
  }
}

