// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: article/v1/article.proto

package articlev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wolodata/proto/gen/article/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ArticleServiceName is the fully-qualified name of the ArticleService service.
	ArticleServiceName = "article.v1.ArticleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ArticleServiceListArticlesProcedure is the fully-qualified name of the ArticleService's
	// ListArticles RPC.
	ArticleServiceListArticlesProcedure = "/article.v1.ArticleService/ListArticles"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	articleServiceServiceDescriptor            = v1.File_article_v1_article_proto.Services().ByName("ArticleService")
	articleServiceListArticlesMethodDescriptor = articleServiceServiceDescriptor.Methods().ByName("ListArticles")
)

// ArticleServiceClient is a client for the article.v1.ArticleService service.
type ArticleServiceClient interface {
	ListArticles(context.Context, *connect.Request[v1.ListArticlesRequest]) (*connect.Response[v1.ListArticlesResponse], error)
}

// NewArticleServiceClient constructs a client for the article.v1.ArticleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArticleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ArticleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &articleServiceClient{
		listArticles: connect.NewClient[v1.ListArticlesRequest, v1.ListArticlesResponse](
			httpClient,
			baseURL+ArticleServiceListArticlesProcedure,
			connect.WithSchema(articleServiceListArticlesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// articleServiceClient implements ArticleServiceClient.
type articleServiceClient struct {
	listArticles *connect.Client[v1.ListArticlesRequest, v1.ListArticlesResponse]
}

// ListArticles calls article.v1.ArticleService.ListArticles.
func (c *articleServiceClient) ListArticles(ctx context.Context, req *connect.Request[v1.ListArticlesRequest]) (*connect.Response[v1.ListArticlesResponse], error) {
	return c.listArticles.CallUnary(ctx, req)
}

// ArticleServiceHandler is an implementation of the article.v1.ArticleService service.
type ArticleServiceHandler interface {
	ListArticles(context.Context, *connect.Request[v1.ListArticlesRequest]) (*connect.Response[v1.ListArticlesResponse], error)
}

// NewArticleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArticleServiceHandler(svc ArticleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	articleServiceListArticlesHandler := connect.NewUnaryHandler(
		ArticleServiceListArticlesProcedure,
		svc.ListArticles,
		connect.WithSchema(articleServiceListArticlesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/article.v1.ArticleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ArticleServiceListArticlesProcedure:
			articleServiceListArticlesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedArticleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArticleServiceHandler struct{}

func (UnimplementedArticleServiceHandler) ListArticles(context.Context, *connect.Request[v1.ListArticlesRequest]) (*connect.Response[v1.ListArticlesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("article.v1.ArticleService.ListArticles is not implemented"))
}
