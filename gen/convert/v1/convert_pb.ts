// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file convert/v1/convert.proto (package convert.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message convert.v1.PdfToHtmlRequest
 */
export class PdfToHtmlRequest extends Message<PdfToHtmlRequest> {
  /**
   * @generated from field: bytes pdf = 1;
   */
  pdf = new Uint8Array(0);

  constructor(data?: PartialMessage<PdfToHtmlRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "convert.v1.PdfToHtmlRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pdf", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PdfToHtmlRequest {
    return new PdfToHtmlRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PdfToHtmlRequest {
    return new PdfToHtmlRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PdfToHtmlRequest {
    return new PdfToHtmlRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PdfToHtmlRequest | PlainMessage<PdfToHtmlRequest> | undefined, b: PdfToHtmlRequest | PlainMessage<PdfToHtmlRequest> | undefined): boolean {
    return proto3.util.equals(PdfToHtmlRequest, a, b);
  }
}

/**
 * @generated from message convert.v1.PdfToHtmlResponse
 */
export class PdfToHtmlResponse extends Message<PdfToHtmlResponse> {
  /**
   * @generated from field: string html = 1;
   */
  html = "";

  constructor(data?: PartialMessage<PdfToHtmlResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "convert.v1.PdfToHtmlResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "html", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PdfToHtmlResponse {
    return new PdfToHtmlResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PdfToHtmlResponse {
    return new PdfToHtmlResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PdfToHtmlResponse {
    return new PdfToHtmlResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PdfToHtmlResponse | PlainMessage<PdfToHtmlResponse> | undefined, b: PdfToHtmlResponse | PlainMessage<PdfToHtmlResponse> | undefined): boolean {
    return proto3.util.equals(PdfToHtmlResponse, a, b);
  }
}

