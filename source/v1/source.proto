syntax = "proto3";

package source.v1;

import "permission/v1/permission.proto";

service SourceService {
  rpc ListSources(ListSourcesRequest) returns (ListSourcesResponse);
  rpc GetSource(GetSourceRequest) returns (GetSourceResponse);

  // 后台

  // 创建信源
  rpc CreateSource(CreateSourceRequest) returns (CreateSourceResponse) {
    option (permission.v1.is_backend) = true;
    option (permission.v1.minimum_role) = ROLE_SUPER_ADMIN;
  }

  // 删除信源
  rpc DeleteSource(DeleteSourceRequest) returns (DeleteSourceResponse) {
    option (permission.v1.is_backend) = true;
    option (permission.v1.minimum_role) = ROLE_SUPER_ADMIN;
  }

  // 更新信源
  rpc UpdateSource(UpdateSourceRequest) returns (UpdateSourceResponse) {
    option (permission.v1.is_backend) = true;
    option (permission.v1.minimum_role) = ROLE_SUPER_ADMIN;
  }

  // 创建目录
  rpc CreateFolder(CreateFolderRequest) returns (CreateFolderResponse) {
    option (permission.v1.is_backend) = true;
    option (permission.v1.minimum_role) = ROLE_SUPER_ADMIN;
  }

  // 更新目录
  rpc UpdateFolder(UpdateFolderRequest) returns (UpdateFolderResponse) {
    option (permission.v1.is_backend) = true;
    option (permission.v1.minimum_role) = ROLE_SUPER_ADMIN;
  }

  // 删除目录
  rpc DeleteFolder(DeleteFolderRequest) returns (DeleteFolderResponse) {
    option (permission.v1.is_backend) = true;
    option (permission.v1.minimum_role) = ROLE_SUPER_ADMIN;
  }

  // 获取目录
  rpc GetFolder(GetFolderRequest) returns (GetFolderResponse) {}

  // 获取完整目录树结构（包含所有目录和信源）
  rpc GetFolderTree(GetFolderTreeRequest) returns (GetFolderTreeResponse) {}

  // 移动信源到其他目录
  rpc MoveSourceToFolder(MoveSourceToFolderRequest) returns (MoveSourceToFolderResponse) {
    option (permission.v1.is_backend) = true;
    option (permission.v1.minimum_role) = ROLE_SUPER_ADMIN;
  }

  // 批量调整同一目录内项目（目录或信源）的排序
  rpc UpdateItemsOrderInSameFolder(UpdateItemsOrderInSameFolderRequest) returns (UpdateItemsOrderInSameFolderResponse) {
    option (permission.v1.is_backend) = true;
    option (permission.v1.minimum_role) = ROLE_SUPER_ADMIN;
  }
}

message ListSourcesRequest {}

message ListSourcesResponse {
  repeated Source sources = 1;
}

message GetSourceRequest {
  string id = 1;
}

message GetSourceResponse {
  Source source = 1;
}

message Source {
  string id = 1;
  string name_chinese = 2;
  bool is_chinese = 3;
  bool allow_image = 4;
  bool is_show = 5;
  string folder_id = 6; // 所属目录ID："__UNASSIGNED__"表示未分类
  uint32 order_index = 7; // 在目录中的排序位置
}

message CreateSourceRequest {
  string id = 1;
  string name_chinese = 2;
  bool is_chinese = 3;
  bool allow_image = 4;
  bool is_show = 5;
}

message CreateSourceResponse {}

message DeleteSourceRequest {
  string id = 1;
}

message DeleteSourceResponse {}

message UpdateSourceRequest {
  string id = 1;
  string name_chinese = 2;
  bool is_chinese = 3;
  bool allow_image = 4;
  bool is_show = 5;
}

message UpdateSourceResponse {}

// ========== 目录相关消息定义 ==========
//
// 说明：
// - "__ROOT__" 代表根目录，其父目录ID为空字符串
// - "__UNASSIGNED__" 代表未分类目录，其父目录ID为空字符串
// - 普通目录的父目录ID可以是 "__ROOT__"（表示在根目录下）或其他目录的ID

// 项目类型枚举（目录或信源）
enum ItemType {
  ITEM_TYPE_UNSPECIFIED = 0;
  ITEM_TYPE_FOLDER = 1; // 目录
  ITEM_TYPE_SOURCE = 2; // 信源
}

// 目录（文件夹）
message Folder {
  string id = 1;
  string name = 2;
  string parent_id = 3; // 父目录ID，"__ROOT__"代表根目录
  uint32 level = 4; // 目录层级（查询时返回，创建时不需要传递）
  uint32 order_index = 5; // 在父目录中的排序位置
  int64 created_at = 6; // 创建时间（Unix时间戳）
  int64 updated_at = 7; // 更新时间（Unix时间戳）
}

// 目录树节点（用于返回树结构）
message FolderTreeNode {
  ItemType type = 1;
  oneof item {
    Folder folder = 2; // type=FOLDER时有值
    Source source = 3; // type=SOURCE时有值
  }
  repeated FolderTreeNode children = 4; // 子节点（仅当type=FOLDER时有值）
  uint32 order_index = 5; // 排序位置
}

// 创建目录
message CreateFolderRequest {
  string name = 1;
  string parent_id = 2; // 父目录ID，"__ROOT__"代表根目录
}

message CreateFolderResponse {}

// 更新目录
message UpdateFolderRequest {
  string id = 1;
  string name = 2;
}

message UpdateFolderResponse {}

// 删除目录
message DeleteFolderRequest {
  string id = 1;
}

message DeleteFolderResponse {}

// 获取目录详情
message GetFolderRequest {
  string id = 1;
}

message GetFolderResponse {
  Folder folder = 1;
  repeated FolderTreeNode children = 2; // 该目录下的直接子项（子目录和信源）
}

// 获取完整目录树
message GetFolderTreeRequest {}

message GetFolderTreeResponse {
  repeated FolderTreeNode nodes = 1; // 树形结构的根节点列表
}

// 移动信源到其他目录
message MoveSourceToFolderRequest {
  string source_id = 1; // 要移动的信源ID
  string target_folder_id = 2; // 目标目录ID："__UNASSIGNED__"表示移到未分类
  // 注意：移动后默认放在目标目录的最后，如需调整排序请使用 UpdateItemsOrderInFolder
}

message MoveSourceToFolderResponse {}

// 批量调整同一目录内项目的排序
message UpdateItemsOrderInSameFolderRequest {
  message ItemOrder {
    ItemType type = 1;
    string item_id = 2;
    uint32 order_index = 3;
  }

  string parent_id = 1; // 父目录ID（所有项目必须在同一父目录下）
  repeated ItemOrder items = 2; // 新的排序列表
}

message UpdateItemsOrderInSameFolderResponse {}
