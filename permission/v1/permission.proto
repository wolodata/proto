syntax = "proto3";

package permission.v1;

// PermissionService 权限管理服务
// 用于管理系统的角色、功能集和方法权限
//
// 设计说明：
// 1. 角色(Role)直接存储方法列表(enabled_methods)，用于实际鉴权
// 2. 创建/更新角色时，前端直接传入具体的方法列表(enabled_methods)
service PermissionService {
  // ==================== 角色管理 ====================

  // ListRoles 获取角色列表（分页）
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse);

  // GetRole 获取单个角色详情
  rpc GetRole(GetRoleRequest) returns (GetRoleResponse);

  // CreateRole 创建新角色
  // 前端直接传入 enabled_methods 列表
  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse);

  // UpdateRole 更新角色信息
  // 前端直接传入 enabled_methods 列表
  rpc UpdateRole(UpdateRoleRequest) returns (UpdateRoleResponse);

  // DeleteRole 删除角色
  rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse);

  // ==================== 方法管理 ====================

  // ListAllMethods 获取所有可用方法列表（不分页）
  rpc ListAllMethods(ListAllMethodsRequest) returns (ListAllMethodsResponse);

  // ==================== 用户角色分配 ====================

  // AssignRoleToUser 为用户分配角色
  rpc AssignRoleToUser(AssignRoleToUserRequest) returns (AssignRoleToUserResponse);
}

// ==================== 角色管理相关消息 ====================

// RoleInfo 角色信息
message RoleInfo {
  string role_id = 1; // 角色ID
  string role_name = 2; // 角色名称（唯一）
  string description = 3; // 角色描述
  repeated string enabled_methods = 4; // 方法全名列表（实际存储在数据库中用于鉴权）
  repeated string llm_models_disabled = 5; // 禁用的LLM模型列表
  uint64 count_limit_daily_llm_talk_right_side = 6; // 右侧AI对话每日次数限制（0表示不限制）
  uint64 count_limit_keyword = 7; // 关键词数量限制（0表示不限制）
  uint64 count_limit_category = 8; // 范畴数量限制（0表示不限制）
  uint64 count_limit_daily_free_ask = 9; // 智慧对话每日次数限制（0表示不限制）
  uint64 updated_at = 10; // 更新时间（Unix时间戳）
}

// ListRolesRequest 获取角色列表请求
message ListRolesRequest {
  uint32 page_number = 1; // 页码，从1开始
  uint32 limit = 2; // 每页数量
}

// ListRolesResponse 获取角色列表响应
message ListRolesResponse {
  uint32 total_count = 1; // 总记录数
  uint32 page_size = 2; // 每页大小
  uint32 total_page = 3; // 总页数
  uint32 current_page = 4; // 当前页码
  repeated RoleInfo items = 5; // 角色列表
}

// GetRoleRequest 获取角色详情请求
message GetRoleRequest {
  string role_id = 1; // 角色ID
}

// GetRoleResponse 获取角色详情响应
message GetRoleResponse {
  RoleInfo role = 1; // 角色信息
}

// CreateRoleRequest 创建角色请求
message CreateRoleRequest {
  string role_name = 1; // 角色名称（必须唯一）
  string description = 2; // 角色描述
  repeated string enabled_methods = 3; // 方法全名列表，前端直接传入
  repeated string llm_models_disabled = 4; // 禁用的LLM模型列表
  uint64 count_limit_daily_llm_talk_right_side = 5; // 右侧AI对话每日次数限制
  uint64 count_limit_keyword = 6; // 关键词数量限制
  uint64 count_limit_category = 7; // 范畴数量限制
  uint64 count_limit_daily_free_ask = 8; // 智慧对话每日次数限制
}

// CreateRoleResponse 创建角色响应
message CreateRoleResponse {
  string role_id = 1; // 新创建的角色ID
}

// UpdateRoleRequest 更新角色请求
message UpdateRoleRequest {
  string role_id = 1; // 要更新的角色ID
  string role_name = 2; // 角色名称
  string description = 3; // 角色描述
  repeated string enabled_methods = 4; // 方法全名列表，前端直接传入
  repeated string llm_models_disabled = 5; // 禁用的LLM模型列表
  uint64 count_limit_daily_llm_talk_right_side = 6; // 右侧AI对话每日次数限制
  uint64 count_limit_keyword = 7; // 关键词数量限制
  uint64 count_limit_category = 8; // 范畴数量限制
  uint64 count_limit_daily_free_ask = 9; // 智慧对话每日次数限制
}

// UpdateRoleResponse 更新角色响应
message UpdateRoleResponse {}

// DeleteRoleRequest 删除角色请求
message DeleteRoleRequest {
  string role_id = 1; // 要删除的角色ID
}

// DeleteRoleResponse 删除角色响应
message DeleteRoleResponse {}

// ==================== 方法管理相关消息 ====================

// MethodInfo 方法信息
// 所有的 gRPC 方法会在首次被调用时自动注册到数据库
message MethodInfo {
  string full_name = 1; // 方法全名，格式如: "user.v1.UserService/GetUserInfo"
  string description = 2; // 方法描述
}

// ServiceMethods 服务的方法列表
message ServiceMethods {
  repeated MethodInfo methods = 1; // 该服务下的方法列表
}

// ListAllMethodsRequest 获取所有方法列表请求（不分页）
message ListAllMethodsRequest {}

// ListAllMethodsResponse 获取所有方法列表响应
message ListAllMethodsResponse {
  map<string, ServiceMethods> services = 1; // key 是 service 名称，如 "user.v1.UserService"
}

// AssignRoleToUserResponse 为用户分配角色响应
message AssignRoleToUserResponse {}

// ==================== 用户角色分配相关消息 ====================

// AssignRoleToUserRequest 为用户分配角色请求
message AssignRoleToUserRequest {
  string user_id = 1; // 用户ID
  string role_id = 2; // 要分配的角色ID
}
